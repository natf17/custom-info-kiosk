type Query {
    aboutPage(locale: String): AboutPage
    error404Page(locale: String): Error404Page
    eventSeasons(locale: String): [EventSeason]
    seasonalEvents(locale: String, sort: String): [SeasonalEvent]
    seasonalEvent(locale: String, id: ID!): SeasonalEvent
}

type Mutation {
    createEventSeason(input: EventSeasonPayload): EventSeasonAdmin
    createLocalizedField(input: LocalizedInput) : EventSeasonAdmin
    createSeasonalEvents(eventSeasonId: ID, input: SeasonalEventPayload) : [SeasonalEvent]
    updateSeasonalEvent(seasonalEventId: ID, input: SeasonalEventPutPayload) : SeasonalEvent
    deleteSeasonalEvent(input: DeletePayload) : MessageResponse

}

type FeatureImage {
    url: String
    width: Int
    height: Int
    alternativeText: String
}

type AboutPage {
    pageTitle: String
    richDescription: String
    featImg: FeatureImage
}

type RedirectLink {
    url: String
    displayText: String
    description: String
}

type Error404Page {
    pageTitle: String
    errorDescription: String
    showRedirectLink: Boolean
    redirectLink: RedirectLink
}

type EventSeason {
    id: ID
    type: String
    durationDays: Int
    theme: String
    serviceYear: Int
    seasonYears: String
    durationText: String
}

type EventSeasonAdmin {
    id: ID
    type: String
    durationDays: Int
    theme: [LocalizedField]
    serviceYear: Int
    seasonYears: String
    durationText: [LocalizedField]
}

type LocalizedField {
    locale: String
    value: String
}

input LocalizedInput {
    locale: String
    value: String
}

input EventSeasonInput {
    type: String
    durationDays: Int
    serviceYear: Int
    theme: [LocalizedInput]
    durationText: [LocalizedInput]
}

input EventSeasonPayload {
    data: EventSeasonInput
}

type SeasonalEvent {
    id: ID
    seasonalType: String
    startDate: String
    eventLanguage: String
    event_season: EventSeason
}

input SeasonalEventPayload {
    data: [SeasonalEventInput]
}

input SeasonalEventPutPayload {
    data: SeasonalEventInput
}

input SeasonalEventInput {
    startDate: String
    eventLanguage: String
}

input DeletePayload {
    where: DeleteInput
}

input DeleteInput {
    id: ID
}

type MessageResponse {
    message: String
}