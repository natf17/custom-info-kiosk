type Query {
    aboutPage(locale: String): AboutPage
    error404Page(locale: String): Error404Page
    eventSeasons(locale: String): [EventSeason]
    seasonalEvents(locale: String, sort: String): [SeasonalEvent]
    seasonalEvent(locale: String, id: ID!): SeasonalEvent
    eventsPage(locale: String): EventsPage
    homePage(locale: String): HomePage
    mapPage(locale: String): MapPage
    menuPage(locale: String): MenuPage
    locations(locale: String, sort: String): [Location]
    locationsAdmin(sort: String): [LocationAdmin]
    locationAdmin(locationId: ID): LocationAdmin
    bathrooms(locale: String, sort: String): [Bathroom]
    bathroomsAdmin(sort: String): [BathroomAdmin]
    bathroomAdmin(bathroomId: ID!): BathroomAdmin
    donations(locale: String, sort: String): [Donation]
    donationsAdmin(sort: String): [DonationAdmin]
    donationAdmin(donationId: ID!): DonationAdmin

}

type Mutation {
    createEventSeason(input: EventSeasonPayload): EventSeasonAdmin
    createSeasonalEvents(eventSeasonId: ID, input: SeasonalEventPayload) : [SeasonalEvent]
    updateSeasonalEvent(seasonalEventId: ID, input: SeasonalEventPutPayload) : SeasonalEvent
    deleteSeasonalEvent(input: DeletePayload) : MessageResponse
    updateEventSeason(eventSeasonId: ID, input: SingleEventSeasonPayload): EventSeasonAdmin
    deleteEventSeason(input: DeletePayload) : MessageResponse
    createError404Page(locale: String!, input: Error404PagePayload): Error404Page
    updateError404Page(locale: String!, input: Error404PagePayload): Error404Page
    deleteError404Page(input: PageDeletePayload) : MessageResponse
    createAboutPage(locale: String!, input: AboutPagePayload): AboutPage
    updateAboutPage(locale: String!, input: AboutPagePayload): AboutPage
    deleteAboutPage(input: PageDeletePayload) : MessageResponse
    createEventsPage(locale: String!, input: EventsPagePayload): EventsPage
    updateEventsPage(locale: String!, input: EventsPagePayload): EventsPage
    deleteEventsPage(input: PageDeletePayload) : MessageResponse
    createHomePage(locale: String!, input: HomePagePayload): HomePage
    updateHomePage(locale: String!, input: HomePagePayload): HomePage
    deleteHomePage(input: PageDeletePayload) : MessageResponse
    createMapPage(locale: String!, input: MapPagePayload): MapPage
    updateMapPage(locale: String!, input: MapPagePayload): MapPage
    deleteMapPage(input: PageDeletePayload) : MessageResponse
    createMenuPage(locale: String!, input: MenuPagePayload): MenuPage
    updateMenuPage(locale: String!, input: MenuPagePayload): MenuPage
    deleteMenuPage(input: PageDeletePayload) : MessageResponse
    createLocation(input: LocationPayload): LocationAdmin
    updateLocation(locationId: ID!, input: LocationPayload): LocationAdmin
    deleteLocation(input: DeletePayload) : MessageResponse
    createBathroom(input: BathroomPayload!): BathroomAdmin
    updateBathroom(bathroomId: ID!, input: BathroomPayload!): BathroomAdmin
    deleteBathroom(input: DeletePayload) : MessageResponse
    createDonation(input: DonationPayload!): DonationAdmin
    updateDonation(donationId: ID!, input: DonationPayload!): DonationAdmin
    deleteDonation(input: DeletePayload) : MessageResponse

}

type FeatureImage {
    url: String
    width: Int
    height: Int
    alternativeText: String
}

type AboutPage {
    pageTitle: String
    richDescription: String
    featImg: FeatureImage
}

type RedirectLink {
    url: String
    displayText: String
    description: String
}

type Error404Page {
    pageTitle: String
    errorDescription: String
    showRedirectLink: Boolean
    redirectLink: RedirectLink
}

type EventSeason {
    id: ID
    type: String
    durationDays: Int
    theme: String
    serviceYear: Int
    seasonYears: String
    durationText: String
}

type EventSeasonAdmin {
    seasons: [EventSeason]
}


input LocalizedInput {
    locale: String
    value: String
}

input EventSeasonInput {
    type: String
    durationDays: Int
    serviceYear: Int
    theme: [LocalizedInput]
    durationText: [LocalizedInput]
}

input EventSeasonPayload {
    data: EventSeasonInput
}

type SeasonalEvent {
    id: ID
    seasonalType: String
    startDate: String
    eventLanguage: String
    event_season: EventSeason
}

input SeasonalEventPayload {
    data: [SeasonalEventInput]
}

input SeasonalEventPutPayload {
    data: SeasonalEventInput
}

input SeasonalEventInput {
    startDate: String
    eventLanguage: String
}

input DeletePayload {
    where: DeleteInput
}

input DeleteInput {
    id: ID
}

type MessageResponse {
    message: String
}

input SingleEventSeasonPayload {
    data: SingleSeasonalEventInput
}

input SingleSeasonalEventInput {
    type: String
    durationDays: Int
    serviceYear: Int
    theme: String
    durationText: String
}

input Error404PagePayload {
    data: Error404PageInput
}

input Error404PageInput {
    pageTitle: String
    errorDescription: String
    showRedirectLink: Boolean
    redirectLink: RedirectLinkInput
}

input RedirectLinkInput {
    url: String
    displayText: String
    description: String
}

input PageDeletePayload {
    where: PageDeleteInput
}

input PageDeleteInput {
    locale: String
}

input AboutPagePayload {
    data: AboutPageInput
}

input AboutPageInput {
    pageTitle: String
    richDescription: String
    featImg: FeatureImageInput
}

input FeatureImageInput {
    url: String
    width: Int
    height: Int
    alternativeText: String
}

type EventsPage {
    pageTitle: String
    pageDescription: String
    eventLangPickerLabel: String
    general: GeneralStrings
    sectionREG: EventSection
    sectionCACO: EventSection
    sectionCABR: EventSection
    sectionOTHER: EventSection
}

type GeneralStrings {
    eventThemeLabel: String
    durationLabel: String
    yearsShowingLabel: String
    dateLabel: String
    eventLangLabel: String
    noEventsFound: String
}

type EventSection {
    title: String
    btn_text: String
}

input EventsPagePayload {
    data: EventsPageInput
}

input EventsPageInput {
    pageTitle: String
    pageDescription: String
    eventLangPickerLabel: String
    general: GeneralStringsInput
    sectionREG: EventSectionInput
    sectionCACO: EventSectionInput
    sectionCABR: EventSectionInput
    sectionOTHER: EventSectionInput
}

input GeneralStringsInput {
    eventThemeLabel: String
    durationLabel: String
    yearsShowingLabel: String
    dateLabel: String
    eventLangLabel: String
    noEventsFound: String
}

input EventSectionInput {
    title: String
    btn_text: String
}

type HomePage {
    id: String
    pageTitle: String
    tapToContinuePrompt: String
    welcomeText: String
    showSelectFromAvailableLocales: Boolean
}

input HomePagePayload {
    data: HomePageInput
}

input HomePageInput {
    pageTitle: String
    tapToContinuePrompt: String
    welcomeText: String
    showSelectFromAvailableLocales: Boolean
}

type MapPage {
    pageTitle: String
    pageDescription: String
    tapWidget: TapWidget
    showSelectFromAvailableLocales: Boolean
    mapViewConfig: MapViewConfig
    bathroomAmenity: LocationAmenity
    waterFountainAmenity: LocationAmenity
    firstAidAmenity: LocationAmenity
    donationAmenity: LocationAmenity
    maps: MapImages
}

type TapWidget {
    instructions: String
    br_label: String
    water_label: String
    firstaid_label: String
    donations_label: String
    noResultsFound: String
}

type MapViewConfig {
    enableFsCustomMaps: Boolean
    clearResults: String
    levelSelect: String
    mapNotAvailable: String
}

type LocationAmenity {
    widgetLabel: String
    headingLabel: String
}

type MapImages {
    default: MapImage
    bathrooms: MapImage
    waterFountains: MapImage
    firstAid: MapImage
    donations: MapImage
}

type MapImage {
    width: Int
    height: Int
    url: String
}

input MapPagePayload {
    data: MapPageInput
}

input MapPageInput {
    pageTitle: String
    pageDescription: String
    tapWidget: TapWidgetInput
    showSelectFromAvailableLocales: Boolean
    mapViewConfig: MapViewConfigInput
    bathroomAmenity: LocationAmenityInput
    waterFountainAmenity: LocationAmenityInput
    firstAidAmenity: LocationAmenityInput
    donationAmenity: LocationAmenityInput
    maps: MapImagesInput
}

input TapWidgetInput {
    instructions: String
    br_label: String
    water_label: String
    firstaid_label: String
    donations_label: String
    noResultsFound: String
}

input MapViewConfigInput {
    enableFsCustomMaps: Boolean
    clearResults: String
    levelSelect: String
    mapNotAvailable: String
}

input LocationAmenityInput {
    widgetLabel: String
    headingLabel: String
}

input MapImagesInput {
    defaultMap: MapImageInput
    bathrooms: MapImageInput
    waterFountains: MapImageInput
    firstAid: MapImageInput
    donations: MapImageInput
}

input MapImageInput {
    width: Int
    height: Int
    url: String
}

type MenuPage {
    pageTitle: String
    directory: MenuItemContainerView
    events: MenuItemContainerView
    about: MenuItemContainerView
}

type MenuItemContainerView {
    title: String
    menuItems: [MenuItem]
}

type MenuItem {
    id: ID
    isVisible: Boolean
    label: String
    url: String
    image: MenuItemImage
}

type MenuItemImage {
    url: String
    width: Int
    height: Int
}

input MenuPagePayload {
    data: MenuPageInput
}

input MenuPageInput {
    pageTitle: String
    directory: MenuItemContainerInput
    events: MenuItemContainerInput
    about: MenuItemContainerInput
}

input MenuItemContainerInput {
    title: String
    menuItems: [MenuItemInput]
}

input MenuItemInput {
    isVisible: Boolean
    label: String
    url: String
    image: MenuItemImageInput
}

input MenuItemImageInput {
    url: String
    width: Int
    height: Int
}

type Location {
    id: ID
    fullname: String
    level_num: Int
    level_name: String
    map: LocationMap
}

type LocationMap {        
    width: Int
    height: Int
    url: String
}

type LocationAdmin {
    id: ID
    fullname: [LocalizedField]
    level_num: Int
    level_name: [LocalizedField]
    map: [LocalizedLocationMap]
}

type LocalizedLocationMap {        
    locale: String
    value: LocationMap
}

type LocalizedField {
    locale: String
    value: String
}

input LocationPayload {
    data: LocationInput
}

input LocationInput {
    fullname: [LocalizedInput]
    level_num: Int
    level_name: [LocalizedInput]
    map: [LocalizedLocationMapInput]
}

input LocalizedLocationMapInput {        
    locale: String
    value: LocationMapInput
}

input LocationMapInput {        
    width: Int
    height: Int
    url: String
}

type Bathroom {
    id: String
    name: String
    gender: String
    isWheelchairAccessible: Boolean
    svgElemId: String
    note: String
    location: Location  
    featImg: BathroomImage
}

type BathroomImage {        
    width: Int
    height: Int
    url: String
}

type BathroomAdmin {
    id: String
    name: [LocalizedField]
    gender: String
    isWheelchairAccessible: Boolean
    svgElemId: [LocalizedField]
    note: [LocalizedField]
    location: Location
    featImg: [LocalizedBathroomImage]
}

type LocalizedBathroomImage {        
    locale: String
    value: BathroomImage
}

input BathroomPayload {
    data: BathroomInput
}

input BathroomInput {
    name: [LocalizedInput]
    gender: String
    isWheelchairAccessible: Boolean
    svgElemId: [LocalizedInput]
    note: [LocalizedInput]
    locationId: ID
    featImg: [LocalizedBathroomImageInput]
}

input LocalizedBathroomImageInput {
    locale: String
    value: BathroomImageInput
}

input BathroomImageInput {        
    width: Int
    height: Int
    url: String
}

type Donation {
    id: String
    name: String
    isWheelchairAccessible: Boolean
    svgElemId: String
    note: String
    location: Location
    paymentTypesAccepted: String
    featImg: DonationImage
}

type DonationImage {        
    width: Int
    height: Int
    url: String
}

type DonationAdmin {
    id: String
    name: [LocalizedField]
    isWheelchairAccessible: Boolean
    svgElemId: [LocalizedField]
    note: [LocalizedField]
    location: Location
    paymentTypesAccepted: String
    featImg: [LocalizedDonationImage]
}

type LocalizedDonationImage{
    locale: String
    value: DonationImage
}

input DonationPayload {
    data: DonationInput
}

input DonationInput {
    id: String
    name: [LocalizedInput]
    isWheelchairAccessible: Boolean
    svgElemId: [LocalizedInput]
    note: [LocalizedInput]
    locationId: ID
    paymentTypesAccepted: String
    featImg: [LocalizedDonationImageInput]
}

input LocalizedDonationImageInput {
    locale: String
    value: DonationImageInput
}

input DonationImageInput {
    width: Int
    height: Int
    url: String
}